# Write your MySQL query statement below
SELECT FirstName,LastName,City,State
FROM Person LEFT JOIN Address ON Person.PersonId = Address.PersonId

//奖金小于1000的，
# Write your MySQL query statement below
select name, bonus from Employee left join Bonus on Employee.empId=Bonus.empId 
where Bonus.bonus is NULL or  Bonus.bonus<1000 



select left(trans_date,7) as month, country, 
sum(case when state='approved' then 1 else 0 end) as approved_count, 
sum(case when state='approved' then amount else 0 end) as approved_amount, 
sum(case when state is null then 1 else 0 end) as chargeback_count, 
sum(case when state is null then amount else 0 end) as chargeback_amount from 
(select c.trans_id, country, null as state, t.amount, c.trans_date from Chargebacks c join Transactions t on t.id=c.trans_id 
union select * from Transactions) a
group by month, country

得到第二高
select max(Salary) as SecondHighestSalary from Employee where Salary not in (select max(Salary) from Employee)

排序
select Score as score,dense_rank() over(order by Score desc) as "Rank" from Scores 
+-------+---------+
| score | Rank    |
+-------+---------+
| 4.00  | 1       |
| 4.00  | 1       |
| 3.85  | 2       |
| 3.65  | 3       |
| 3.65  | 3       |
| 3.50  | 4       |
+-------+---------+

员工比经理工资高
# Write your MySQL query statement below
SELECT E1.Name AS Employee
FROM Employee AS E1, Employee AS E2
WHERE E1.ManagerId = E2.Id AND E1.Salary > E2.Salary

重复的email
select email from person group by email having count(*) > 1


没有下单的客户
select Name as Customers from Customers left join Orders on customers.Id = Orders.CustomerId where Orders.CustomerId is null


//删除重复email
delete
from person
where (id, email) in
(select id, email from
(select *, rank() over (partition by email order by id) as rk
from person) a
where rk !=1)

选出每个player的第一次登陆记录
SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id ORDER BY 1 ASC

去除重复student
select class from courses group by class having count(distinct student) >= 5

//算比例
# Write your MySQL query statement below
WITH FR AS (SELECT DISTINCT SENDER_ID, SEND_TO_ID FROM FRIENDREQUEST),
     RA AS (SELECT DISTINCT REQUESTER_ID, ACCEPTER_ID FROM REQUESTACCEPTED)
SELECT ROUND(COALESCE((SELECT COUNT(*) FROM RA)/(SELECT COUNT(*) FROM FR),0),2) AS ACCEPT_RATE
