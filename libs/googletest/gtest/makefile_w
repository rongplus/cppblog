# Makefile for Writing Make Files Example
 
# *****************************************************
# Variables to control Makefile operation
#cl -Wall -g  -IC:\work\git_code\googletest\googletest\include //-IC:\work\git_code\googletest\googlemock\include //
#C:\work\git_code\googletest\build\lib\release\gtest.lib //C:\work\git_code\googletest\build\lib\Release\gmock.lib t1.cpp
CC = cl
CFLAGS = -Wall -g -std=c++14
# define any directories containing header files other than /usr/include
#
INCLUDES = -IC:\work\git_code\googletest\googletest\include -IC:\work\git_code\googletest\googlemock\include

# define library paths in addition to /usr/lib
#   if I wanted to include libraries not in /usr/lib I'd specify
#   their path using -Lpath, something like:
LFLAGS = C:\work\git_code\googletest\build\lib\release\gtest.lib C:\work\git_code\googletest\build\lib\Release\gmock.lib

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname 
#   option, something like (this will link in libmylib.so and libm.so:
LIBS = -lgtest.lib -lgmock.lib

# ****************************************************
# Targets needed to bring the executable up to date
 
mypro: main.obj mock.obj gassert.obj expect.obj parameter.obj
	$(CC) $(CFLAGS) $(INCLUDES) $(LFLAGS)  -o test.exe main.obj mock.obj parameter.obj expect.obj gassert.obj
 
# The main.o target can be written more simply
 
main.obj: main.cpp gassert.h expect.h parameter.h mock.h
	$(CC) $(CFLAGS) $(INCLUDES)  -c main.cpp
 
gassert.obj: gassert.cpp
	$(CC) $(CFLAGS) $(INCLUDES)    -c gassert.cpp
mock.obj: mock.cpp
	$(CC) $(CFLAGS) $(INCLUDES)   -c mock.cpp

expect.obj: expect.cpp
	$(CC) $(CFLAGS) $(INCLUDES)  -c expect.cpp

parameter.obj: parameter.cpp
	$(CC) $(CFLAGS) $(INCLUDES)  -c parameter.cpp